#pragma once
/*
 Name        : search_functions.h
 Description : 標準プログラムのsearch.cのうち，searchA()，searchB()関数内にある，
			   標準プログラムでいうところのdrive.hに記述されている関数の呼び出しを置き換える必要あり。
			   get_wall_info()関数はmain関数内に記述がある。
*/

#include "drive.h"
#include "macro.h"
#include "global.h"
#include "search.h"

/*===========================================================
		探索系関数
===========================================================*/
/*-----------------------------------------------------------
		足立法探索走行α(一区画走行)
-----------------------------------------------------------*/
//+++++++++++++++++++++++++++++++++++++++++++++++
//searchA
//	足立法でgoal座標に進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA() {																		//一次走行　一番基本的な初期装備

	//====マップデータ初期化====
	//map_Init();																		//マップデータを初期化する

	//====歩数等初期化====
	m_step = r_cnt = 0;															//歩数と経路カウンタの初期化
	get_wall_info();																	//壁情報の初期化, 後壁はなくなる
	write_map();																		//地図の初期化
	make_smap();																	//歩数図の初期化
	make_route();																	//最短経路探索(route配列に動作が格納される)
	
	//====探索走行====
	do {
		//----進行----
		switch (route[r_cnt++]) {												//route配列によって進行を決定。経路カウンタを進める
			//----前進----
		case 0x88:
			break;
			//----右折----
		case 0x44:
			//turn_R90();										//右回転
			turn_dir(DIR_TURN_R90);											//マイクロマウス内部位置情報でも右回転処理
			//drive_wait;										//安定するまで待機
			break;
			//----180回転----
		case 0x22:
			//turn_180();										//180度回転
			turn_dir(DIR_TURN_180);											//マイクロマウス内部位置情報でも180度回転処理
			//drive_wait;										//安定するまで待機
			break;
			//----左折----
		case 0x11:
			//turn_L90();										//左回転
			turn_dir(DIR_TURN_L90);											//マイクロマウス内部位置情報でも左回転処理
			//drive_wait;										//安定するまで待機
			break;
		}
		//drive_wait;											//安定するまで待機
		//one_section();										//前進する
		//drive_wait;											//安定するまで待機
		adv_pos();																		//マイクロマウス内部位置情報でも前進処理
		get_wall_info();				// 探索シュミレータ用に追加
		print_m_location();		// 探索シュミレータ用に追加
		conf_route();																	//最短経路で進行可能か判定

		/*if ((PRELOC.AXIS.X == 2) && (PRELOC.AXIS.Y == 1)) {
			p++;
		}*/

	} while ((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));
	//現在座標とgoal座標が等しくなるまで実行

	//ms_drive_wait(2000);								//スタートでは***2秒以上***停止しなくてはならない
	//turn_180();												//180度回転
	turn_dir(DIR_TURN_180);													//マイクロマウス内部位置情報でも180度回転処理
}


/*-----------------------------------------------------------
		足立法探索走行β(全面探索走行)
-----------------------------------------------------------*/
//+++++++++++++++++++++++++++++++++++++++++++++++
//searchB
//	複数の仮goal座標に足立法で進み全面探索を目指す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB() {																		//一次走行　一番基本的な初期装備

	//====マップデータ初期化====
	//map_Init();																		//マップデータを初期化する

	int i = 0;
	int j = 0;

	do {
		//====歩数等初期化====
		m_step = r_cnt = 0;															//歩数と経路カウンタの初期化
		find_pregoal();																	//仮goalまでの歩数マップの初期化
		if (allmap_flag == 1) break;
		make_smap2();
		make_route();																	//最短経路探索(route配列に動作が格納される)
		//====探索走行====
		do {
			//----進行----
			switch (route[r_cnt++]) {												//route配列によって進行を決定。経路カウンタを進める
				//----前進----
			case 0x88:
				break;
				//----右折----
			case 0x44:
				//turn_R90();										//右回転
				turn_dir(DIR_TURN_R90);											//マイクロマウス内部位置情報でも右回転処理
				//drive_wait;												//安定するまで待機
				break;
				//----180回転----
			case 0x22:
				//turn_180();										//180度回転
				turn_dir(DIR_TURN_180);											//マイクロマウス内部位置情報でも180度回転処理
				//drive_wait;												//安定するまで待機
				break;
				//----左折----
			case 0x11:
				//turn_L90();										//左回転
				turn_dir(DIR_TURN_L90);											//マイクロマウス内部位置情報でも左回転処理
				//drive_wait;										//安定するまで待機
				break;
			}
			//drive_wait;											//安定するまで待機
			//one_section();										//前進する
			//drive_wait;											//安定するまで待機
			adv_pos();																		//マイクロマウス内部位置情報でも前進処理
			//get_wall_info();				// 探索シュミレータ用に追加
			print_m_location();		// 探索シュミレータ用に追加
			//conf_route();																//最短経路で進行可能か判定
			j++;
			if (j > 150) break;										//移動マス数が150以上になった場合全面探索を中止

		} while ((PRELOC.AXIS.X != pregoal_x) || (PRELOC.AXIS.Y != pregoal_y));		//現在座標と仮goal座標が等しくなるまで実行

		//ms_drive_wait(2000);								//スタートでは***2秒以上***停止しなくてはならない
		//turn_180();												//180度回転
		//turn_dir(DIR_TURN_180);												//マイクロマウス内部位置情報でも180度回転処理

		get_wall_info();																	//壁情報の初期化, 後壁はなくなる
		write_map();																		//地図の初期化

		if (j > 150) break;											//移動マス数が150以上になった場合全面探索を中止
		i++;

	} while (i < 130);
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//searchL
//	左手拡張法でgoal座標に進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
/*
smap[16][16] ... 足立法利用時は歩数マップだが，左手拡張法利用時は訪問済みリストで，
				 0:未探索, 1:探索済 を表す。
*/
void searchL() {

	//====訪問済みリスト等初期化====
	UCHAR i;
	for (i = 0; i < 16; i++) {
		UCHAR j;
		for (j = 0; j < 16; j++) {
			smap[i][j] = 0;
		}
	}

	//====初期座標の壁情報取得と壁情報記入====
	get_wall_info();																//壁情報の初期化, 後壁はなくなる
	write_map();																	//地図の初期化

	//====探索走行====
	do {
		smap[PRELOC.AXIS.Y][PRELOC.AXIS.X] = 1;
		UINT smap_temp[4];													// 訪問済み情報を格納。
							// 3:Front, 2:Right, 1:Back, 0:Left
#define set_smap_temp(A,B,C,D) do{smap_temp[0]=A;smap_temp[1]=B;smap_temp[2]=C;smap_temp[3]=D;}while(0)

// m_dir ... N : 0, W : 1, S : 2, E : 3
		switch (m_dir) {
		case 0:
			set_smap_temp(
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1],
				smap[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X],
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1],
				smap[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X]);
			break;
		case 3:
			set_smap_temp(
				smap[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X],
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1],
				smap[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X],
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1]);
			break;
		case 2:
			set_smap_temp(
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1],
				smap[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X],
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1],
				smap[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X]);
			break;
		case 1:
			set_smap_temp(
				smap[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X],
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1],
				smap[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X],
				smap[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1]);
			break;
		}

		UCHAR dir;
		//wall_info ... 3bit:Front, 2bit:Right, 1bit:Back, 0bit:Left
		if (!(wall_info & 0X1) && smap_temp[0] == 0) {							//====左に壁なし && 左区画未訪問====
			dir = 0X11;		// 左折
		}
		else if (!(wall_info & 0X8) && smap_temp[3] == 0) {					//====前に壁なし && 前区画未訪問====
			dir = 0X88;		// 前進
		}
		else if (!(wall_info & 0X4) && smap_temp[2] == 0) {					//====右に壁なし && 前区画未訪問====
			dir = 0X44;		// 右折
		}
		else if (!(wall_info & 0X1)) {														//====左に壁なし====
			dir = 0X11;		// 左折
		}
		else if (!(wall_info & 0X8)) {														//====前に壁なし====
			dir = 0X88;		// 前進
		}
		else if (!(wall_info & 0X4)) {														//====右に壁なし====
			dir = 0X44;		// 右折
		}
		else {																						//====それ以外====
			dir = 0X22;		// 180度回転
		}

		//----進行----
		switch (dir) {
			//----前進----
		case 0x88:
			break;
			//----右折----
		case 0x44:
			turn_dir(DIR_TURN_R90);
			break;
			//----180回転----
		case 0x22:
			turn_dir(DIR_TURN_180);
			break;
			//----左折----
		case 0x11:
			turn_dir(DIR_TURN_L90);
			break;
		}

		adv_pos();
		get_wall_info();				// 探索シュミレータ用に追加
		write_map();
		print_m_location();		// 探索シュミレータ用に追加

	} while ((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));

	turn_dir(DIR_TURN_180);														//マイクロマウス内部位置情報でも180度回転処理	
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//adv_pos
//	マイクロマウス内部位置情報で前進させる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos()
{
	switch (m_dir) {																		//マイクロマウスが現在向いている方向で判定
	case 0x00:																				//北方向に向いている場合
		(PRELOC.AXIS.Y)++;															//Y座標をインクリメント
		break;
	case 0x01:																				//東方向に向いている場合
		(PRELOC.AXIS.X)++;															//X座標をインクリメント
		break;
	case 0x02:																				//南方向に向いている場合
		(PRELOC.AXIS.Y)--;															//Y座標をデクリメント
		break;
	case 0x03:																				//西方向に向いている場合
		(PRELOC.AXIS.X)--;															//X座標をデクリメント
		break;
	}
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//conf_route
//	進路を判定する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route()
{
	//----壁情報書き込み----
	write_map();

	//----最短経路上に壁があれば進路変更----
	if (wall_info & route[r_cnt]) {
		make_smap();																//歩数マップを更新
		make_route();																//最短経路を更新
		r_cnt = 0;																		//経路カウンタを0に
	}
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//map_Init
//	マップ格納配列map[][]の初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init()
{
	//====変数宣言====
	UCHAR x, y;																		//for文用変数

	//====初期化開始====
	//マップのクリア
	for (y = 0; y <= 0x0f; y++) {												//各Y座標で実行
		for (x = 0; x <= 0x0f; x++) {											//各X座標で実行
			map[y][x] = 0xf0;														//上位(2次走行時)を壁あり、下位(1次走行時)を壁なしとする。
		}
	}

	//確定壁の配置
	for (y = 0; y <= 0x0f; y++) {												//各Y座標で実行
		map[y][0] |= 0xf1;														//最西に壁を配置
		map[y][15] |= 0xf4;														//最東に壁を配置
	}
	for (x = 0; x <= 0x0f; x++) {												//各X座標で実行
		map[0][x] |= 0xf2;														//最南に壁を配置
		map[15][x] |= 0xf8;														//最北に壁を配置
	}
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//write_map
//	マップデータを書き込む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map()
{
	//====変数宣言====
	UCHAR m_temp;																	//向きを補正した壁情報

	//====壁情報の補正格納====
	m_temp = (wall_info >> m_dir) & 0x0f;									//センサ壁情報をm_dirで向きを補正させて下位4bit分を残す
	m_temp |= (m_temp << 4);													//上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納

	//====データの書き込み====
	map[PRELOC.AXIS.Y][PRELOC.AXIS.X] = m_temp; 					//現在地に書き込み
	//----周辺に書き込む----
	//北側について
	if (PRELOC.AXIS.Y != 15) {														//現在最北端でないとき
		if (m_temp & 0x88) {															//北壁がある場合
			map[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X] |= 0x22;		//北側の区画から見て南壁ありを書き込む
		}
		else {																				//北壁がない場合
			map[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X] &= 0xDD;		//北側の区画から見て南壁なしを書き込む
		}
	}
	//東側について
	if (PRELOC.AXIS.X != 15) {														//現在最東端でないとき
		if (m_temp & 0x44) {															//東壁がある場合
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1] |= 0x11;		//東側の区画から見て西壁ありを書き込む
		}
		else {																				//北壁がない場合
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1] &= 0xEE;		//東側の区画から見て西壁なしを書き込む
		}
	}
	//南壁について
	if (PRELOC.AXIS.Y != 0) {														//現在最南端でないとき
		if (m_temp & 0x22) {															//南壁がある場合
			map[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X] |= 0x88;			//南側の区画から見て北壁ありを書き込む
		}
		else {																				//南壁がない場合
			map[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X] &= 0x77;		//南側の区画から見て北壁なしを書き込む
		}
	}
	//西側について
	if (PRELOC.AXIS.X != 0) {														//現在最西端でないとき
		if (m_temp & 0x11) {															//西壁がある場合
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1] |= 0x44;			//西側の区画から見て東壁ありを書き込む
		}
		else {																				//西壁がない場合
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1] &= 0xBB;		//西側の区画から見て東側なしを書き込む
		}
	}
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//turn_dir
//	マウスの方向を変更する
// 引数1：t_pat・・・回転方向(drive.hでマクロ定義)
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(UCHAR	t_pat)
{
	//====方向を変更====
	m_dir = (m_dir + t_pat) & 0x03;											//指定された分m_dirを回転させる
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//make_smap
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap()
{
	//====変数宣言====
	UCHAR x, y;																			//for文用変数
	UCHAR m_temp;																	//マップデータ一時保持
	UCHAR m_temp_sample[16];

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {													//各Y座標で実行
		for (x = 0; x <= 0x0f; x++) {												//各X座標で実行
			smap[y][x] = 0x03e7;													//未記入部分は歩数最大とする
		}
	}

	//====ゴール座標を0にする====
	smap[goal_y][goal_x] = 0;

	//====歩数カウンタを0にする====
	m_step = 0;																			//現在記入した最大の歩数となる

	//====歩数カウンタの重みづけ====
	int straight = 3;
	int turn = 5;

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {												//各Y座標で実行
			for (x = 0; x <= 0x0f; x++) {											//各X座標で実行
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {										//歩数格納変数m_stepの値が現在最大の歩数のとき
					m_temp = map[y][x];											//map配列からマップデータを取り出す
					if (MF.FLAG.SCND) {												//二次走行用のマップを作成する場合(二次走行時はMF.FLAG.SCNDをTrueにする)
						m_temp >>= 4;												//上位4bitを使うので4bit分右にシフトさせる
					}
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {						//北壁がなく現在最北端でないとき
						if (smap[y + 1][x] == 0x03e7) {							//北側が未記入なら
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
							//----直線優先処理----
							for (int k = 1; k < 16-y; k++) {						//現在座標から見て北のマスすべてにおいて
								m_temp_sample[k] = map[y + k][x];			//map配列からマップデータを取り出す
								if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;	//二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
								if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {			//北壁がなく現在最北端でないとき
									if (smap[y + k + 1][x] == 0x03e7) {								//北側が未記入なら
										smap[y + k + 1][x] = smap[y + k][x] + straight;			//直線分インクリメントした値を次のマスの歩数マップに書き込む
									}
								}
								else break;
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {						//東壁がなく現在最東端でないとき
						if (smap[y][x + 1] == 0x03e7) {							//東側が未記入なら
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
							//----直線優先処理----
							for (int k = 1; k < 16 - x; k++) {					//現在座標から見て東のマスすべてにおいて
								m_temp_sample[k] = map[y][x + k];			//map配列からマップデータを取り出す
								if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;	//二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
								if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {			//東壁がなく現在最東端でないとき
									if (smap[y][x + k + 1] == 0x03e7) {								//東側が未記入なら
										smap[y][x + k + 1] = smap[y][x + k] + straight;			//直線分インクリメントした値を次のマスの歩数マップに書き込む
									}
								}
								else break;
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {							//南壁がなく現在最南端でないとき
						if (smap[y - 1][x] == 0x03e7) {							//南側が未記入なら
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
							//----直線優先処理----
							for (int k = 1; k < y; k++) {							//現在座標から見て南のマスすべてにおいて
								m_temp_sample[k] = map[y - k][x];			//map配列からマップデータを取り出す
								if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;	//二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
								if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {			//南壁がなく現在最南端でないとき
									if (smap[y - k - 1][x] == 0x03e7) {									//南側が未記入なら
										smap[y - k - 1][x] = smap[y - k][x] + straight;			//直線分インクリメントした値を次のマスの歩数マップに書き込む
									}
								}
								else break;
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {							//西壁がなく現在最西端でないとき
						if (smap[y][x - 1] == 0x03e7) {							//西側が未記入なら
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
							//----直線優先処理----
							for (int k = 1; k < x; k++) {							//現在座標から見て西のマスすべてにおいて
								m_temp_sample[k] = map[y][x - k];			//map配列からマップデータを取り出す
								if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;	//二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
								if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {			//西壁がなく現在最西端でないとき
									if (smap[y][x - k - 1] == 0x03e7) {									//西側が未記入なら
										smap[y][x - k - 1] = smap[y][x - k] + straight;			//直線分インクリメントした値を次のマスの歩数マップに書き込む
									}
								}
								else break;
							}
						}
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
	} while (smap[PRELOC.AXIS.Y][PRELOC.AXIS.X] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//make_route
//	最短経路を導出する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route()
{
	//====変数宣言====
	UCHAR i = 0;																			//カウンタ
	UCHAR x, y;																			//X、Y座標
	UCHAR dir_temp = m_dir;														//方向の保管用変数
	UCHAR m_temp;																	//マップデータ一時保持

	//====最短経路を初期化====
	do {
		route[i++] = 0xff;																//routeを初期化、iをインクリメント
	} while (i != 0);																		//iが0でない間実行(iがオーバーフローして0になるまで実行？)

	//====歩数カウンタをセット====
	m_step = smap[PRELOC.AXIS.Y][PRELOC.AXIS.X];					//現在座標の歩数マップ値を取得

	//====x, yに現在座標を書き込み====
	x = (UCHAR)PRELOC.AXIS.X;
	y = (UCHAR)PRELOC.AXIS.Y;

	//====最短経路を導出====
	do {
		m_temp = map[y][x];														//比較用マップ情報の格納
		if (MF.FLAG.SCND) {															//二次走行用のマップを作成する場合(二次走行時はMF.FLAG.SCNDをTrueにする)
			m_temp >>= 4;															//上位4bitを使うので4bit分右にシフトさせる
		}

		//m_dir ... N : 0, W : 1, S : 2, E : 3
		UCHAR priority[4];																// 探索優先順を格納する変数
																								// 初期状態だと，N,E,S,Wの順に優先度が高い
#define set_priority(A,B,C,D) do{priority[0]=A;priority[1]=B;priority[2]=C;priority[3]=D;}while(0)

		if (m_dir == 0) {			// m_dir = N : N,E,S,W
			if (route_dir == 0) set_priority(0, 1, 2, 3);
			if (route_dir == 1) set_priority(1, 2, 3, 0);
			if (route_dir == 2) set_priority(2, 3, 0, 1);
			if (route_dir == 3) set_priority(3, 0, 1, 2);						//route_dirに入力した優先方向に応じて条件分岐
		}
		else if (m_dir == 1) {	// m_dir = E : E,S,W,N
			if (route_dir == 0) set_priority(1, 2, 3, 0);
			if (route_dir == 1) set_priority(2, 3, 0, 1);
			if (route_dir == 2) set_priority(3, 0, 1, 2);
			if (route_dir == 3) set_priority(0, 1, 2, 3);						//route_dirに入力した優先方向に応じて条件分岐
		}
		else if (m_dir == 2) {	// m_dir = S : S,W,N,E
			if (route_dir == 0) set_priority(2, 3, 0, 1);
			if (route_dir == 1) set_priority(3, 0, 1, 2);
			if (route_dir == 2) set_priority(0, 1, 2, 3);
			if (route_dir == 3) set_priority(1, 2, 3, 0);						//route_dirに入力した優先方向に応じて条件分岐
		}
		else if (m_dir == 3) {	// m_dir = W : W,N,E,S
			if (route_dir == 0) set_priority(3, 0, 1, 2);
			if (route_dir == 1) set_priority(0, 1, 2, 3);
			if (route_dir == 2) set_priority(1, 2, 3, 0);
			if (route_dir == 3) set_priority(2, 3, 0, 1);						//route_dirに入力した優先方向に応じて条件分岐
		}

		UCHAR j;
		for (j = 0; j < 4; j++) {
			if (priority[j] == 0) {			//----北を見る----
				if (!(m_temp & 0x08) && (smap[y + 1][x] < m_step)) {	//北側に壁が無く、現在地より小さい歩数マップ値であれば
					route[i] = (0x00 - m_dir) & 0x03;								//route配列に進行方向を記録
					m_step = smap[y + 1][x];											//最大歩数マップ値を更新
					y++;																			//北に進んだのでY座標をインクリメント
					break;
				}
			}
			else if (priority[j] == 1) {		//----東を見る----
				if (!(m_temp & 0x04) && (smap[y][x + 1] < m_step)) {	//東側に壁が無く、現在地より小さい歩数マップ値であれば
					route[i] = (0x01 - m_dir) & 0x03;								//route配列に進行方向を記録
					m_step = smap[y][x + 1];											//最大歩数マップ値を更新
					x++;																			//東に進んだのでX座標をインクリメント
					break;
				}
			}
			else if (priority[j] == 2) {		//----南を見る----
				if (!(m_temp & 0x02) && (smap[y - 1][x] < m_step)) {	//南側に壁が無く、現在地より小さい歩数マップ値であれば
					route[i] = (0x02 - m_dir) & 0x03;								//route配列に進行方向を記録
					m_step = smap[y - 1][x];											//最大歩数マップ値を更新
					y--;																			//南に進んだのでY座標をデクリメント
					break;
				}
			}
			else if (priority[j] == 3) {		//----西を見る----
				if (!(m_temp & 0x01) && (smap[y][x - 1] < m_step)) {	//西側に壁が無く、現在地より小さい歩数マップ値であれば
					route[i] = (0x03 - m_dir) & 0x03;								//route配列に進行方向を記録
					m_step = smap[y][x - 1];											//最大歩数マップ値を更新
					x--;																			//西に進んだのでX座標をデクリメント
					break;
				}
			}
		}

		//----格納データ形式変更----
		switch (route[i]) {																	//route配列に格納した要素値で分岐
		case 0x00:																				//前進する場合
			route[i] = 0x88;																	//格納データ形式を変更
			break;
		case 0x01:																				//右折する場合
			turn_dir(DIR_TURN_R90);													//内部情報の方向を90度右回転
			route[i] = 0x44;																	//格納データ形式を変更
			break;
		case 0x02:																				//Uターンする場合
			turn_dir(DIR_TURN_180);													//内部情報の方向を180度回転
			route[i] = 0x22;																	//格納データ形式を変更
			break;
		case 0x03:																				//左折する場合
			turn_dir(DIR_TURN_L90);													//内部情報の方向を90度右回転
			route[i] = 0x11;																	//格納データ形式を変更
			break;
		default:																					//それ以外の場合
			route[i] = 0x00;																	//格納データ形式を変更
			break;
		}
		i++;																						//カウンタをインクリメント
	} while (smap[y][x] != 0);															//進んだ先の歩数マップ値が0(=ゴール)になるまで実行
	m_dir = dir_temp;																		//方向を始めの状態に戻す
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//find_pregoal
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
	//====変数宣言====
	UCHAR x, y;																			//for文用変数
	UCHAR m_temp;																	//マップデータ一時保持
	//UCHAR m_temp_sample[16];
	INT break_flag = 0;																	//未知壁マスを見つけた時のループ脱出フラグ

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {													//各Y座標で実行
		for (x = 0; x <= 0x0f; x++) {												//各X座標で実行
			smap[y][x] = 0x03e7;													//未記入部分は歩数最大とする
		}
	}

	//====現在座標を0にする====
	smap[PRELOC.AXIS.Y][PRELOC.AXIS.X] = 0;

	//====歩数カウンタを0にする====
	m_step = 0;																			//現在記入した最大の歩数となる

	//====歩数カウンタの重みづけ====
	int straight = 3;
	int turn = 1;

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {												//各Y座標で実行
			for (x = 0; x <= 0x0f; x++) {											//各X座標で実行
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {										//歩数格納変数m_stepの値が現在最大の歩数のとき
					m_temp = map[y][x];											//map配列からマップデータを取り出す
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {						//北壁がなく現在最北端でないとき
						if (smap[y + 1][x] == 0x03e7) {							//北側が未記入なら
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
								break_flag = 1;											//for文を抜けるフラグを立てて
								m_step2 = smap[y + 1][x];						//仮goalの歩数を記録
								pregoal_x = x;
								pregoal_y = y + 1;											//仮goalの座標を記録
								break;
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {						//東壁がなく現在最東端でないとき
						if (smap[y][x + 1] == 0x03e7) {							//東側が未記入なら
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
								break_flag = 1;											//for文を抜けるフラグを立てて
								m_step2 = smap[y][x + 1];						//仮ゴールの歩数を記録
								pregoal_x = x + 1;
								pregoal_y = y;											//仮goalの座標を記録
								break;
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {							//南壁がなく現在最南端でないとき
						if (smap[y - 1][x] == 0x03e7) {							//南側が未記入なら
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
								break_flag = 1;											//for文を抜けるフラグを立てて
								m_step2 = smap[y - 1][x];							//仮ゴールの歩数を記録
								pregoal_x = x;
								pregoal_y = y - 1;											//仮goalの座標を記録
								break;
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {							//西壁がなく現在最西端でないとき
						if (smap[y][x - 1] == 0x03e7) {							//西側が未記入なら
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
								break_flag = 1;											//for文を抜けるフラグを立てて
								m_step2 = smap[y][x - 1];							//仮ゴールの歩数を記録
								pregoal_x = x - 1;
								pregoal_y = y;											//仮goalの座標を記録
								break;
							}
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
		}
		//====歩数カウンタのインクリメント====
		m_step++;
		if (m_step > 500) allmap_flag = 1;
	} while (break_flag == 0 && allmap_flag != 1);		//未探索壁ありマスを見つけるまで実行
}


//+++++++++++++++++++++++++++++++++++++++++++++++
//make_smap2
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
	//====変数宣言====
	UCHAR x, y;																			//for文用変数
	UCHAR m_temp;																	//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {													//各Y座標で実行
		for (x = 0; x <= 0x0f; x++) {												//各X座標で実行
			smap[y][x] = 0x03e7;													//未記入部分は歩数最大とする
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
	
	//====歩数カウンタを0にする====
	m_step = 0;																			//現在記入した最大の歩数となる

	//====歩数カウンタの重みづけ====
	int straight = 3;
	int turn = 5;

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {												//各Y座標で実行
			for (x = 0; x <= 0x0f; x++) {											//各X座標で実行
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {										//歩数格納変数m_stepの値が現在最大の歩数のとき
					m_temp = map[y][x];											//map配列からマップデータを取り出す
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {						//北壁がなく現在最北端でないとき
						if (smap[y + 1][x] == 0x03e7) {							//北側が未記入なら
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {						//東壁がなく現在最東端でないとき
						if (smap[y][x + 1] == 0x03e7) {							//東側が未記入なら
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {							//南壁がなく現在最南端でないとき
						if (smap[y - 1][x] == 0x03e7) {							//南側が未記入なら
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {							//西壁がなく現在最西端でないとき
						if (smap[y][x - 1] == 0x03e7) {							//西側が未記入なら
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
						}
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
	} while (smap[PRELOC.AXIS.Y][PRELOC.AXIS.X] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
}
